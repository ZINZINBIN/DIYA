{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"chapter04","provenance":[],"collapsed_sections":[],"machine_shape":"hm","authorship_tag":"ABX9TyOdzr4+p+5XjfsF3UQFs5cV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"TQhKvj-1g1K4","executionInfo":{"status":"ok","timestamp":1626704610400,"user_tz":-540,"elapsed":3763,"user":{"displayName":"JINSU KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgcLu5kpD5kTukDHzQytyk6kDsra-9npu-W2pfp=s64","userId":"17278722132218225196"}}},"source":["# colab 전용 라이브러리\n","from google.colab import files, drive, output\n","\n","# pytroch download\n","!pip3 install http://download.pytorch.org/whl/cu80/torch-0.3.0.post4-cp36-cp36m-linux_x86_64.whl\n","!pip3 install torchvision\n","\n","output.clear()"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"9DzhSJZRhnEB","executionInfo":{"status":"ok","timestamp":1626704612940,"user_tz":-540,"elapsed":2543,"user":{"displayName":"JINSU KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgcLu5kpD5kTukDHzQytyk6kDsra-9npu-W2pfp=s64","userId":"17278722132218225196"}}},"source":["import torch\n","import torch.nn as nn\n","import torchvision.datasets as dsets\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import os\n","from tqdm import tqdm\n","import scipy as sp\n","from torch.autograd import Variable"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"p_ckEbb6Jo3B"},"source":["import torch.nn as nn\n","from torch.optim import SGD\n","import torch\n","\n","class Architecture1(nn.Module):\n","    def __init__(self, input_size, hidden_size, num_classes):\n","        super(Architecture1, self).__init__()\n","        self.fc1 = nn.Linear(input_size, hidden_size)\n","        self.relu = nn.ReLU()\n","        self.fc2 = nn.Linear(hidden_size, num_classes)\n","        self.relu = nn.ReLU()\n","        self.fc3 = nn.Linear(hidden_size, num_classes)\n","\n","    def forward(self, x):\n","        out = self.fc1(x)\n","        out = self.relu(out)\n","        out = self.fc2(out)\n","        out = self.relu(out)\n","        out = self.fc3(out)\n","\n","        return out"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zL3m6fLBHlWX"},"source":["loss = nn.MSELoss()\n","optimizer = torch.optim.AdamW(model.parameters(), lr = 1e-4, weight_decay = 1e-5)"],"execution_count":null,"outputs":[]}]}