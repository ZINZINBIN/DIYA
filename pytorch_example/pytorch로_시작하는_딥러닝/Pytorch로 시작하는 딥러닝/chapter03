{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"chapter03","provenance":[],"collapsed_sections":[],"machine_shape":"hm","authorship_tag":"ABX9TyNPt7yjvySvTwxu7mE+uIrB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"TQhKvj-1g1K4","executionInfo":{"status":"ok","timestamp":1626698038186,"user_tz":-540,"elapsed":4584,"user":{"displayName":"JINSU KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgcLu5kpD5kTukDHzQytyk6kDsra-9npu-W2pfp=s64","userId":"17278722132218225196"}}},"source":["# colab 전용 라이브러리\n","from google.colab import files, drive, output\n","\n","# pytroch download\n","!pip3 install http://download.pytorch.org/whl/cu80/torch-0.3.0.post4-cp36-cp36m-linux_x86_64.whl\n","!pip3 install torchvision\n","\n","output.clear()"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"9DzhSJZRhnEB","executionInfo":{"status":"ok","timestamp":1626698040533,"user_tz":-540,"elapsed":2351,"user":{"displayName":"JINSU KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgcLu5kpD5kTukDHzQytyk6kDsra-9npu-W2pfp=s64","userId":"17278722132218225196"}}},"source":["import torch\n","import torch.nn as nn\n","import torchvision.datasets as dsets\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import os\n","from tqdm import tqdm\n","import scipy as sp\n","from torch.autograd import Variable"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"30T7xB6Dwjs4","executionInfo":{"status":"ok","timestamp":1626698376438,"user_tz":-540,"elapsed":326,"user":{"displayName":"JINSU KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgcLu5kpD5kTukDHzQytyk6kDsra-9npu-W2pfp=s64","userId":"17278722132218225196"}},"outputId":"67da1287-486b-4f6d-ae3e-6e88fb9dfa2c"},"source":["# linear layer\n","import torch\n","from torch.nn import Linear, ReLU\n","import torch.nn as nn\n","import numpy as np\n","from torch.autograd import Variable\n","myLayer = Linear(in_features = 10 , out_features = 5, bias = True)  # myLayer은 weight을 통해 가중치 전체를 출력 가능, bias를 통해 b 값을 알 수 있다. \n","\n","inp = Variable(torch.randn(1,10))\n","myLayer(inp)"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[ 0.6997,  0.5116, -0.2257, -0.8233, -0.3637]],\n","       grad_fn=<AddmmBackward>)"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YldzRBCxxpL_","executionInfo":{"status":"ok","timestamp":1626698340436,"user_tz":-540,"elapsed":324,"user":{"displayName":"JINSU KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgcLu5kpD5kTukDHzQytyk6kDsra-9npu-W2pfp=s64","userId":"17278722132218225196"}},"outputId":"5ab5f289-5567-49af-e934-702a21142a30"},"source":["myLayer.weight.size()"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([5, 10])"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xha2-7lfxr_e","executionInfo":{"status":"ok","timestamp":1626698421408,"user_tz":-540,"elapsed":333,"user":{"displayName":"JINSU KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgcLu5kpD5kTukDHzQytyk6kDsra-9npu-W2pfp=s64","userId":"17278722132218225196"}},"outputId":"86a0f921-0dba-45e2-ca27-159080ffddb8"},"source":["myRelu = ReLU()\n","sample_data = Variable(torch.Tensor([1,2,-1,-1]))\n","myRelu(sample_data)"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1., 2., 0., 0.])"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"QG6ivTjiyBGp"},"source":["# 신경망\n","class MyFirstNetwork(nn.Module):\n","    def __init__(self, input_size, hiddne_size, output_size):\n","        super(MyFirstNetwork, self).__init__()\n","        self.layer1 = nn.Linear(input_size, hidden_size)\n","        self.layer2 = nn.Linear(hidden_size, output_size)\n","\n","    def forward(self, input):\n","        out = self.layer1(input)\n","        out = nn.ReLU(out)\n","        out = self.layer2(out)\n","        return out\n","\n","# loss and optimizer\n","loss = nn.MSELoss()\n","\n","inputs = torch.autograd.Variable(torch.randn(3,5), requires_grad = True)\n","target = torch.autograd.Variable(torch.randn(3,5))\n","\n","outputs = loss(inputs, target)\n","outputs.backward()"],"execution_count":null,"outputs":[]}]}